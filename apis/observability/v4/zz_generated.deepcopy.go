//go:build !ignore_autogenerated

/*
** Copyright (c) 2022 Oracle and/or its affiliates.
**
** The Universal Permissive License (UPL), Version 1.0
**
** Subject to the condition set forth below, permission is hereby granted to any
** person obtaining a copy of this software, associated documentation and/or data
** (collectively the "Software"), free of charge and under any and all copyright
** rights in the Software, and any and all patent rights owned or freely
** licensable by each licensor hereunder covering either (i) the unmodified
** Software as contributed to or provided by such licensor, or (ii) the Larger
** Works (as defined below), to deal in both
**
** (a) the Software, and
** (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
** one is included with the Software (each a "Larger Work" to which the Software
** is contributed by such licensors),
**
** without restriction, including without limitation the rights to copy, create
** derivative works of, display, perform, and distribute the Software and make,
** use, sell, offer for sale, import, export, have made, and have sold the
** Software and the Larger Work(s), and to sublicense the foregoing rights on
** either these or other terms.
**
** This license is subject to the following condition:
** The above copyright notice and either this complete permission notice or at
** a minimum a reference to the UPL must be included in all copies or
** substantial portions of the Software.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
** SOFTWARE.
 */

// Code generated by controller-gen. DO NOT EDIT.

package v4

import (
	monitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	"k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AdditionalWalletSecrets) DeepCopyInto(out *AdditionalWalletSecrets) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AdditionalWalletSecrets.
func (in *AdditionalWalletSecrets) DeepCopy() *AdditionalWalletSecrets {
	if in == nil {
		return nil
	}
	out := new(AdditionalWalletSecrets)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AzureConfig) DeepCopyInto(out *AzureConfig) {
	*out = *in
	out.ConfigMap = in.ConfigMap
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AzureConfig.
func (in *AzureConfig) DeepCopy() *AzureConfig {
	if in == nil {
		return nil
	}
	out := new(AzureConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigMapDetails) DeepCopyInto(out *ConfigMapDetails) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigMapDetails.
func (in *ConfigMapDetails) DeepCopy() *ConfigMapDetails {
	if in == nil {
		return nil
	}
	out := new(ConfigMapDetails)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigPrivateKey) DeepCopyInto(out *ConfigPrivateKey) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigPrivateKey.
func (in *ConfigPrivateKey) DeepCopy() *ConfigPrivateKey {
	if in == nil {
		return nil
	}
	out := new(ConfigPrivateKey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBAzureVault) DeepCopyInto(out *DBAzureVault) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBAzureVault.
func (in *DBAzureVault) DeepCopy() *DBAzureVault {
	if in == nil {
		return nil
	}
	out := new(DBAzureVault)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBOCIVault) DeepCopyInto(out *DBOCIVault) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBOCIVault.
func (in *DBOCIVault) DeepCopy() *DBOCIVault {
	if in == nil {
		return nil
	}
	out := new(DBOCIVault)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBSecret) DeepCopyInto(out *DBSecret) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBSecret.
func (in *DBSecret) DeepCopy() *DBSecret {
	if in == nil {
		return nil
	}
	out := new(DBSecret)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseConfig) DeepCopyInto(out *DatabaseConfig) {
	*out = *in
	out.DBUser = in.DBUser
	out.DBPassword = in.DBPassword
	out.DBConnectionString = in.DBConnectionString
	out.OCIVault = in.OCIVault
	out.AzureVault = in.AzureVault
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseConfig.
func (in *DatabaseConfig) DeepCopy() *DatabaseConfig {
	if in == nil {
		return nil
	}
	out := new(DatabaseConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObserver) DeepCopyInto(out *DatabaseObserver) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObserver.
func (in *DatabaseObserver) DeepCopy() *DatabaseObserver {
	if in == nil {
		return nil
	}
	out := new(DatabaseObserver)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseObserver) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObserverList) DeepCopyInto(out *DatabaseObserverList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DatabaseObserver, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObserverList.
func (in *DatabaseObserverList) DeepCopy() *DatabaseObserverList {
	if in == nil {
		return nil
	}
	out := new(DatabaseObserverList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseObserverList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObserverSpec) DeepCopyInto(out *DatabaseObserverSpec) {
	*out = *in
	out.Database = in.Database
	if in.Databases != nil {
		in, out := &in.Databases, &out.Databases
		*out = make(map[string]MultiDatabaseConfig, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	in.Wallet.DeepCopyInto(&out.Wallet)
	in.Deployment.DeepCopyInto(&out.Deployment)
	in.Service.DeepCopyInto(&out.Service)
	in.ServiceMonitor.DeepCopyInto(&out.ServiceMonitor)
	out.ExporterConfig = in.ExporterConfig
	out.OCIConfig = in.OCIConfig
	out.AzureConfig = in.AzureConfig
	in.Metrics.DeepCopyInto(&out.Metrics)
	out.Log = in.Log
	if in.InheritLabels != nil {
		in, out := &in.InheritLabels, &out.InheritLabels
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	in.Sidecar.DeepCopyInto(&out.Sidecar)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObserverSpec.
func (in *DatabaseObserverSpec) DeepCopy() *DatabaseObserverSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseObserverSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObserverStatus) DeepCopyInto(out *DatabaseObserverStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]metav1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObserverStatus.
func (in *DatabaseObserverStatus) DeepCopy() *DatabaseObserverStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseObserverStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeploymentPodTemplate) DeepCopyInto(out *DeploymentPodTemplate) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeploymentPodTemplate.
func (in *DeploymentPodTemplate) DeepCopy() *DeploymentPodTemplate {
	if in == nil {
		return nil
	}
	out := new(DeploymentPodTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExporterConfig) DeepCopyInto(out *ExporterConfig) {
	*out = *in
	out.ConfigMap = in.ConfigMap
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExporterConfig.
func (in *ExporterConfig) DeepCopy() *ExporterConfig {
	if in == nil {
		return nil
	}
	out := new(ExporterConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExporterDeployment) DeepCopyInto(out *ExporterDeployment) {
	*out = *in
	if in.SecurityContext != nil {
		in, out := &in.SecurityContext, &out.SecurityContext
		*out = new(v1.SecurityContext)
		(*in).DeepCopyInto(*out)
	}
	if in.PodSecurityContext != nil {
		in, out := &in.PodSecurityContext, &out.PodSecurityContext
		*out = new(v1.PodSecurityContext)
		(*in).DeepCopyInto(*out)
	}
	if in.ExporterArgs != nil {
		in, out := &in.ExporterArgs, &out.ExporterArgs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ExporterCommands != nil {
		in, out := &in.ExporterCommands, &out.ExporterCommands
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ExporterEnvs != nil {
		in, out := &in.ExporterEnvs, &out.ExporterEnvs
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	in.DeploymentPodTemplate.DeepCopyInto(&out.DeploymentPodTemplate)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExporterDeployment.
func (in *ExporterDeployment) DeepCopy() *ExporterDeployment {
	if in == nil {
		return nil
	}
	out := new(ExporterDeployment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExporterService) DeepCopyInto(out *ExporterService) {
	*out = *in
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]v1.ServicePort, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExporterService.
func (in *ExporterService) DeepCopy() *ExporterService {
	if in == nil {
		return nil
	}
	out := new(ExporterService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExporterServiceMonitor) DeepCopyInto(out *ExporterServiceMonitor) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.NamespaceSelector != nil {
		in, out := &in.NamespaceSelector, &out.NamespaceSelector
		*out = new(monitoringv1.NamespaceSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Endpoints != nil {
		in, out := &in.Endpoints, &out.Endpoints
		*out = make([]monitoringv1.Endpoint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExporterServiceMonitor.
func (in *ExporterServiceMonitor) DeepCopy() *ExporterServiceMonitor {
	if in == nil {
		return nil
	}
	out := new(ExporterServiceMonitor)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogConfig) DeepCopyInto(out *LogConfig) {
	*out = *in
	out.Volume = in.Volume
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogConfig.
func (in *LogConfig) DeepCopy() *LogConfig {
	if in == nil {
		return nil
	}
	out := new(LogConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogVolume) DeepCopyInto(out *LogVolume) {
	*out = *in
	out.PersistentVolumeClaim = in.PersistentVolumeClaim
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogVolume.
func (in *LogVolume) DeepCopy() *LogVolume {
	if in == nil {
		return nil
	}
	out := new(LogVolume)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogVolumePVC) DeepCopyInto(out *LogVolumePVC) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogVolumePVC.
func (in *LogVolumePVC) DeepCopy() *LogVolumePVC {
	if in == nil {
		return nil
	}
	out := new(LogVolumePVC)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetricsConfig) DeepCopyInto(out *MetricsConfig) {
	*out = *in
	if in.Configmap != nil {
		in, out := &in.Configmap, &out.Configmap
		*out = make([]ConfigMapDetails, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetricsConfig.
func (in *MetricsConfig) DeepCopy() *MetricsConfig {
	if in == nil {
		return nil
	}
	out := new(MetricsConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MultiDatabaseConfig) DeepCopyInto(out *MultiDatabaseConfig) {
	*out = *in
	out.DBUser = in.DBUser
	out.DBPassword = in.DBPassword
	out.DBConnectionString = in.DBConnectionString
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MultiDatabaseConfig.
func (in *MultiDatabaseConfig) DeepCopy() *MultiDatabaseConfig {
	if in == nil {
		return nil
	}
	out := new(MultiDatabaseConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OCIConfig) DeepCopyInto(out *OCIConfig) {
	*out = *in
	out.ConfigMap = in.ConfigMap
	out.PrivateKey = in.PrivateKey
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OCIConfig.
func (in *OCIConfig) DeepCopy() *OCIConfig {
	if in == nil {
		return nil
	}
	out := new(OCIConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SidecarConfig) DeepCopyInto(out *SidecarConfig) {
	*out = *in
	if in.Containers != nil {
		in, out := &in.Containers, &out.Containers
		*out = make([]v1.Container, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]v1.Volume, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SidecarConfig.
func (in *SidecarConfig) DeepCopy() *SidecarConfig {
	if in == nil {
		return nil
	}
	out := new(SidecarConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WalletSecret) DeepCopyInto(out *WalletSecret) {
	*out = *in
	if in.AdditionalWallets != nil {
		in, out := &in.AdditionalWallets, &out.AdditionalWallets
		*out = make([]AdditionalWalletSecrets, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WalletSecret.
func (in *WalletSecret) DeepCopy() *WalletSecret {
	if in == nil {
		return nil
	}
	out := new(WalletSecret)
	in.DeepCopyInto(out)
	return out
}

